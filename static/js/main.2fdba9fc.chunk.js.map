{"version":3,"sources":["carousels/IndexCarousel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AnimatedSpan","styled","animated","p","IndexCarousel","props","useState","positions","setPostions","spring","useSpring","to","transform","from","useEffect","limit","carouselLimit","Array","length","_","index","map","position","style","AppBody","div","App","setLimit","setIndex","Math","ceil","random","setTimeout","currentIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAIMA,EAAeC,YAAOC,WAASC,EAAhBF,CAAH,gCAgCHG,EA7BO,SAACC,GACrB,MAAiCC,mBAAmB,IAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KAOMC,EAASC,oBAAU,CACvBC,GAAI,CAAEC,UAAW,qBACjBC,KAAM,CAAED,UAAW,mBAOvB,OAJEE,qBAAU,WATe,IAACC,EAUxBP,GAVwBO,EAUKV,EAAMW,cAT5BC,MAAMJ,KAAK,CAACK,OAAQH,IAAQ,SAACI,EAAGC,GAAJ,OAAcA,EAAQ,SAUxD,CAACf,EAAMW,gBAGV,mCACET,EAAUc,KAAI,SAACC,GAEb,OAAO,cAACtB,EAAD,CAA6BuB,MAAOd,EAApC,SAA6Ca,GAA1BA,SCvB1BE,EAAUvB,IAAOwB,IAAV,mDA4BEC,MAxBf,WACE,MAA0BpB,mBAAiB,GAA3C,mBAAOS,EAAP,KAAcY,EAAd,KACA,EAA0BrB,mBAAiB,GAA3C,mBAAOc,EAAP,KAAcQ,EAAd,KAYA,OAVAd,qBAAU,WACRa,EAASE,KAAKC,KAAqB,GAAhBD,KAAKE,aACvB,IAEHjB,qBAAU,WACRkB,YAAW,WACTJ,EAASR,IAAUL,EAAQ,EAAIK,EAAQ,KACtC,QAIH,eAACI,EAAD,WACE,2DAEA,gDACA,cAAC,EAAD,CAAeR,cAAeD,EAAOkB,aAAcb,QCd1Cc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2fdba9fc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useSpring, animated } from 'react-spring';\n\nconst AnimatedSpan = styled(animated.p)`\n...;`;\n\nconst IndexCarousel = (props: {carouselLimit: number, currentIndex: number}): JSX.Element => {\n  const [positions, setPostions] = useState<number[]>([]);\n\n\n  const createPostionArr = (limit: number): number[] => {\n    return Array.from({length: limit}, (_, index) => index + 1);\n  }\n\n  const spring = useSpring({\n    to: { transform: 'translateY(-100%)' },\n    from: { transform: 'translateY(0)' },\n  })\n\n  useEffect(() => {\n    setPostions(createPostionArr(props.carouselLimit))\n  }, [props.carouselLimit]);\n\nreturn (\n  <>\n  { positions.map((position: number) => {\n    // if (position === props.carouselLimit) {\n      return <AnimatedSpan key={position} style={spring}>{position}</AnimatedSpan>\n    // }\n  })\n  }\n  </>\n  );\n};\n\nexport default IndexCarousel;\n","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\n\nimport IndexCarousel from './carousels/IndexCarousel';\n\nconst AppBody = styled.div`\n  text-align: centre;\n`;\n\nfunction App() {\n  const [limit, setLimit] = useState<number>(0);\n  const [index, setIndex] = useState<number>(0);\n\n  useEffect(() => {\n    setLimit(Math.ceil(Math.random() * 20))\n  }, [])\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIndex(index === limit ? 1 : index + 1);\n    }, 1000)\n  })\n\n  return (\n    <AppBody>\n      <h1>Carousels: Gotta love em.</h1>\n\n      <h2>Index Carousel</h2>\n      <IndexCarousel carouselLimit={limit} currentIndex={index}/>\n    </AppBody>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}